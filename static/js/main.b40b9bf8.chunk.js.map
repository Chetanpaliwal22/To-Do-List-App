{"version":3,"sources":["components/Header.js","components/Login.js","components/Signup.js","ToDoItem.js","firebase.js","components/AddTaskForm.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","toggleTaskMode","this","props","Navbar","dark","expand","className","NavbarBrand","Collapse","navbar","Nav","NavItem","to","onClick","Button","outline","href","React","Component","Login","Form","FormGroup","Label","for","Input","type","name","id","placeholder","variant","Signup","Group","controlId","Control","autoFocus","TodoItem","checked","item","completed","onChange","handleChange","text","db","firebase","initializeApp","apiKey","projectId","storageBucket","messagingSenderId","appId","firestore","AddTaskForm","handleSubmit","event","addToDo","Date","now","inputNode","value","maxLength","required","ref","node","Text","Check","label","Main","mode","setState","completedTaskMode","toggleShowForm","showForm","updateContent","a","collection","get","tododatas","list","docs","map","doc","data","todos","addTodo","newTodo","toString","set","then","state","push","catch","error","console","update","updatedTodos","filter","todo","showHeaderText","headerText","bind","userInfo","auth","signInAnonymously","onAuthStateChanged","user","isAnonymous","uid","todoItems","disabled","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b40b9bf8.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n    Navbar, NavbarBrand, Nav, Collapse, NavItem, Button\r\n} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nclass Header extends React.Component {\r\n\r\n    render() {\r\n        const { toggleTaskMode } = this.props;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Navbar dark expand=\"md header\">\r\n                    <div className=\"container\">\r\n                        <NavbarBrand className=\"mr-auto\">TO-Do List</NavbarBrand>\r\n                        <Collapse navbar>\r\n                            <Nav navbar className=\"headeritem\">\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to='/' onClick={() => toggleTaskMode(false)}><span className=\"fa fa-home fa-lg\"></span> Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to='/completed-task' onClick={() => toggleTaskMode(true)}><span className=\"fa fa-info fa-lg\"></span>Completed-Tasks</NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <Button outline href='/sign-in'>\r\n                                        <span className=\"fa fa-sign-in fa-lg\"></span> Login\r\n                                    </Button>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport Header from './Header';\r\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './css/Login.css';\r\n\r\nclass Login extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Header />\r\n                <Form className=\"todo-list\">\r\n                    <FormGroup className=\"formgroup\">\r\n                        <Label for=\"email\" className=\"label\">Email:</Label>\r\n                        <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Please enter your email.\" />\r\n                    </FormGroup>\r\n                    <FormGroup className=\"formgroup\">\r\n                        <Label for=\"password\" className=\"label\">Password:</Label>\r\n                        <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Please enter your password.\" />\r\n                    </FormGroup>\r\n                    <div className=\"form-group row\">\r\n                        <Button variant=\"outline-success\">Submit</Button>\r\n                        <Button variant=\"outline-secondary\">Continue as Guest</Button>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from \"react\";\r\nimport Header from './Header';\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass Signup extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Header />\r\n                <Form className=\"todo-list\">\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control\r\n                            autoFocus\r\n                            type=\"email\"\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"confirmPassword\">\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\" />\r\n                    </Form.Group>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signup;","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nfunction TodoItem(props) {\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <label>\r\n            <input \r\n                type=\"radio\" \r\n                checked={props.item.completed} \r\n                onChange={() => props.handleChange(props.item.id)}\r\n            />\r\n            </label>\r\n            <p>{props.item.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyB0SROk4amzArI8RzE-omf2dNsMyvFQ6YY\",\r\n  projectId: \"to-do-list-app-25482\",\r\n  storageBucket: \"to-do-list-app-25482.appspot.com\",\r\n  messagingSenderId: \"580095436319\",\r\n  appId: \"1:580095436319:web:79a40bdf16348bba38d72a\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport { db };","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass AddTaskForm extends Component {\r\n\r\n    handleSubmit = (event) => {\r\n        const { addToDo } = this.props;\r\n        const newTodo = {\r\n            id: Date.now(),\r\n            text: this.inputNode.value,\r\n            completed: false\r\n        }\r\n        addToDo(newTodo);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group controlId=\"formTask\">\r\n                    <Form.Label>Task Detail</Form.Label>\r\n                    <Form.Control type=\"text\" maxLength={30} placeholder=\"Enter task name.\" required ref={node => (this.inputNode = node)} />\r\n                    <Form.Text className=\"text-muted\">\r\n                        We'll be pushing this task to DB.\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicCheckbox\">\r\n                    <Form.Check type=\"checkbox\" required label=\"Prove that, you are not a robot.\" />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" onClick={this.handleSubmit} type=\"button\">\r\n                    Add\r\n                </Button>\r\n            </Form>\r\n        )\r\n    };\r\n}\r\n\r\nexport default AddTaskForm;","import React, { Component } from \"react\";\r\nimport TodoItem from '../ToDoItem';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { db } from '../firebase';\r\nimport firebase from \"firebase\";\r\nimport Header from './Header';\r\nimport AddTaskForm from \"./AddTaskForm\";\r\n\r\nclass Main extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            todos: [],\r\n            showForm: false,\r\n            userInfo: {},\r\n            completedTaskMode: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //Signing in anonymous user\r\n        try {\r\n            await firebase.auth().signInAnonymously()\r\n        }\r\n        catch (error) {\r\n            //Handle Error here\r\n        }\r\n\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                // User is signed in.\r\n                var isAnonymous = user.isAnonymous;\r\n                var uid = user.uid;\r\n                let userInfo = {\r\n                    isAnonymous,\r\n                    uid\r\n                }\r\n                this.setState({ userInfo })\r\n            } else {\r\n                // User is signed out.\r\n            }\r\n        });\r\n\r\n        this.updateContent()\r\n    }\r\n\r\n    toggleTaskMode = (mode) => this.setState({ completedTaskMode: mode });\r\n    toggleShowForm = (mode) => this.setState({ showForm: mode });\r\n\r\n    updateContent = async () => {\r\n        let tododatas = await db.collection(\"ToDoList\").get();\r\n        let list = tododatas.docs.map(doc => {\r\n            return doc.data()\r\n        })\r\n        this.setState({\r\n            todos: list\r\n        })\r\n    };\r\n\r\n    addTodo = (newTodo) => {\r\n        db.collection('ToDoList').doc(newTodo.id.toString()).set(newTodo).then(() => {\r\n            const { todos } = this.state;\r\n            todos.push(newTodo);\r\n            this.setState({\r\n                todos,\r\n                showForm: false\r\n            })\r\n        }).catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n    }\r\n\r\n    handleChange = (id) => {\r\n\r\n        db.collection(\"ToDoList\").doc(id.toString()).update({\r\n            \"completed\": true,\r\n        }).then(() => {\r\n            let updatedTodos = this.state.todos.filter(function (todo) {\r\n                return todo.id !== id;\r\n            });\r\n            this.setState({ todos: updatedTodos });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { completedTaskMode, showForm, todos } = this.state;\r\n        const todoItems = todos.filter((item) => { return item.completed === completedTaskMode }).map((item) => < TodoItem key={item.id} item={item} handleChange={this.handleChange} />)\r\n\r\n        return (\r\n            <div>\r\n                <Header toggleTaskMode={this.toggleTaskMode} />\r\n                {completedTaskMode ?\r\n                    <div className=\"todo-list\">\r\n                        {this.showHeaderText(\"Woo Hoo, You have completed following tasks!\")}\r\n                        {todoItems}\r\n                    </div> :\r\n                    <div className=\"todo-list\">\r\n                        {this.showHeaderText(\"Hey there, what's on your mind today?\")}\r\n                        {todoItems}\r\n                        {showForm && this.showForm()}\r\n                        <div className=\"todo-button\">\r\n                            <Button variant=\"outline-success\" onClick={() => this.toggleShowForm(true)} disabled={showForm}>Add Task</Button>\r\n                        </div>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    showHeaderText = (headerText) => {\r\n        return <h3> {headerText} </h3>\r\n    }\r\n\r\n    showForm = () => {\r\n        return (\r\n            <AddTaskForm addToDo={this.addTodo.bind(this)} />\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Main;","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Login from './components/Login';\r\nimport Signup from './components/Signup';\r\nimport Main from './components/Main';\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route exact path='/' component={Main} />\r\n            <Route exact path='/completed-task' component={Main} />\r\n            <Route path=\"/sign-in\" component={Login} />\r\n            <Route path=\"/sign-up\" component={Signup} />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}