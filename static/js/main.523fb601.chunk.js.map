{"version":3,"sources":["ToDoItem.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","checked","item","completed","onChange","handleChange","id","text","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","App","updatedTodos","state","todos","map","todo","setState","showForm","Form","onSubmit","handleSubmit","Group","controlId","Label","Control","placeholder","ref","node","inputNode","Text","Check","label","Button","variant","event","Date","now","newTask","value","collection","doc","toString","set","push","deleteTask","bind","get","tododatas","list","docs","data","this","todoItems","key","onClick","delete","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.523fb601.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nfunction TodoItem(props) {\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <label>\r\n            <input \r\n                type=\"checkbox\" \r\n                checked={props.item.completed} \r\n                onChange={() => props.handleChange(props.item.id)}\r\n            />\r\n            </label>\r\n            <p>{props.item.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import firebase from \"firebase\";\r\n\r\n  const firebaseApp = firebase.initializeApp({\r\n    // copy and paste your firebase credential here\r\n    apiKey: \"AIzaSyAQKCYjy59CpKaLlqjuSxNRywzHq0Zh7C0\",\r\n    authDomain: \"to-do-list-app-98ae2.firebaseapp.com\",\r\n    databaseURL: \"https://to-do-list-app-98ae2.firebaseio.com\",\r\n    projectId: \"to-do-list-app-98ae2\",\r\n    storageBucket: \"to-do-list-app-98ae2.appspot.com\",\r\n    messagingSenderId: \"6718932861\",\r\n    appId: \"1:6718932861:web:89bc34e406ddca03a4ee14\"\r\n  });\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport  { db };","import React from 'react'\r\nimport TodoItem from './ToDoItem'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport { db } from './firebase'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      todos: [],\r\n      showForm: false\r\n    }\r\n\r\n    this.deleteTask = this.deleteTask.bind(this)\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let tododatas = await db.collection(\"DataList\").get()\r\n    let list = tododatas.docs.map(doc => {\r\n      return doc.data()\r\n    })\r\n    this.setState({\r\n      todos: list\r\n    })\r\n  }\r\n\r\n  handleChange = (id) => {\r\n    let updatedTodos = this.state.todos.map(todo => {\r\n      //console.log(todo.completed)\r\n      if (todo.id === id) {\r\n        todo.completed = !todo.completed\r\n      }\r\n      return todo\r\n    })\r\n\r\n    this.setState(updatedTodos)\r\n  }\r\n\r\n  render() {\r\n    const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange} />)\r\n\r\n    return (\r\n      <div className=\"todo-list\">\r\n        <div >\r\n          <h1> TO-DO LIST </h1>\r\n          <h3>Hey Chetan, what's on your mind today?</h3>\r\n          {todoItems}\r\n        </div>\r\n        {this.state.showForm ? this.showForm() : null}\r\n        <div className=\"todo-button\">\r\n          <Button variant=\"outline-success\" onClick={() => this.setState({ showForm: true })}>Add Task</Button>\r\n          <Button variant=\"outline-danger\" onClick={this.deleteTask}>Delete Task</Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  showForm = () => {\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <Form.Group controlId=\"formTask\">\r\n          <Form.Label>Task Detail</Form.Label>\r\n          <Form.Control type=\"text\" placeholder=\"Enter task name.\" ref={node => (this.inputNode = node)} />\r\n          <Form.Text className=\"text-muted\">\r\n            We'll be pushing this task to Firebase DB.\r\n        </Form.Text>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicCheckbox\">\r\n          <Form.Check type=\"checkbox\" label=\"Prove that, you are not a robot.\" />\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Add\r\n      </Button>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    this.setState({ showForm: false })\r\n    let id = Date.now();\r\n    let newTask = {\r\n      id: id,\r\n      text: this.inputNode.value,\r\n      completed: false\r\n    }\r\n    db.collection('DataList').doc(id.toString()).set(newTask)\r\n    this.state.todos.push(newTask)\r\n  }\r\n\r\n  async deleteTask () {\r\n    let updatedTodos = this.state.todos.map(todo => {\r\n      if (todo.completed) {\r\n        db.collection(\"DataList\")\r\n          .doc(todo.id.toString())\r\n          .delete()\r\n      }\r\n      return todo\r\n    })\r\n    let tododatas =await db.collection(\"DataList\").get()\r\n    let list = tododatas.docs.map(doc => {\r\n      return doc.data()\r\n    })\r\n    this.setState({\r\n      todos: list\r\n    })\r\n  }\r\n\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}