{"version":3,"sources":["components/TodoItem/ToDoItem.js","firebase.js","components/Header/Header.js","components/TaskForm/TaskForm.js","utils/Validation.js","components/Signin/Signin.js","components/Signup/Signup.js","components/Leaderboard/Leaderboard.js","components/Loading/Loading.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","checked","item","status","onChange","handleChange","userId","task","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Header","this","toggleCompletedTaskMode","toggleSigninPopup","toggleSignupPopup","toggleLeaderboardPopup","handleLogOut","Navbar","dark","expand","NavbarBrand","Collapse","navbar","Nav","NavItem","to","onClick","userInfo","userName","NavDropdown","title","Item","React","Component","TaskForm","handleSubmit","event","addToDo","Date","now","userEmail","inputNode","value","dateCreated","Form","Group","controlId","Label","Control","maxLength","placeholder","required","ref","node","val","length","len","minLength","validEmail","test","isSamePassword","password","confirmPassword","Sigin","appTokenKey","handleSignin","validateForm","state","emailValid","passwordValid","auth","signInWithEmailAndPassword","email","then","user","authSuccess","catch","err","code","shareToast","setState","a","collection","where","get","docs","map","doc","userData","data","updateUserInfo","message","toast","onEmailchange","target","name","onPasswordchange","handleGoogleLogin","bind","loginWithGoogle","result","error","alert","localStorage","removeItem","setItem","googleProvider","GoogleAuthProvider","signInWithPopup","showSigninPopup","configure","Modal","show","onHide","closeButton","Title","Body","FormGroup","for","Input","invalid","id","FormFeedback","Footer","Button","variant","Signup","onNamechange","onConfirmPasswordchange","registerUser","nameValid","confirmPasswordValid","createUserWithEmailAndPassword","toggleLoadingMode","toString","set","console","confirmpassword","showSignupPopup","Leaderboard","showLeaderboardPopup","Loading","Main","mode","completedTaskMode","toggleShowTaskFormMode","showTaskForm","isLoading","signOut","updateContent","tododatas","list","todos","addTodo","newTodo","push","update","updatedTodos","todo","showHeaderText","headerText","releaseVersion","onAuthStateChanged","uid","displayName","completedtodos","filter","pendingtodos","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6a80a3f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"../../style.css\"\r\n\r\nfunction TodoItem(props) {\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <label>\r\n            <input \r\n                type=\"radio\" \r\n                checked={props.item.status === 'completed'} \r\n                onChange={() => props.handleChange(props.item.userId)}\r\n            />\r\n            </label>\r\n            <p>{props.item.task}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyB0SROk4amzArI8RzE-omf2dNsMyvFQ6YY\",\r\n  authDomain: \"to-do-list-app-25482.firebaseapp.com\",\r\n  projectId: \"to-do-list-app-25482\",\r\n  storageBucket: \"to-do-list-app-25482.appspot.com\",\r\n  messagingSenderId: \"580095436319\",\r\n  appId: \"1:580095436319:web:79a40bdf16348bba38d72a\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport { db };\r\n","import React from 'react';\r\nimport {\r\n    Navbar, NavbarBrand, Nav, Collapse, NavItem\r\n} from 'reactstrap';\r\nimport { NavDropdown } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nclass Header extends React.Component {\r\n\r\n    render() {\r\n        const { toggleCompletedTaskMode, toggleSigninPopup, toggleSignupPopup, toggleLeaderboardPopup, handleLogOut } = this.props;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Navbar dark expand=\"md header\">\r\n                    <div className=\"container\">\r\n                        <NavbarBrand className=\"mr-auto\">TO-Do List</NavbarBrand>\r\n                        <Collapse navbar>\r\n                            <Nav navbar className=\"headeritem\">\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to='/To-Do-List-App/home' onClick={() => toggleCompletedTaskMode(false)}><span className=\"fa fa-home fa-sm\"></span> Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to='/To-Do-List-App/completed-task' onClick={() => toggleCompletedTaskMode(true)}><span className=\"fa fa-list fa-sm\"></span> Completed-Tasks</NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                {this.props.userInfo.userName !== '' ?\r\n                                    <NavDropdown title={<span className=\"text-white\">{this.props.userInfo.userName}</span>}>\r\n                                        <NavDropdown.Item>About To-Do List</NavDropdown.Item>\r\n                                        <NavDropdown.Item onClick={() => toggleLeaderboardPopup()}>Leaderboard</NavDropdown.Item>\r\n                                        <NavDropdown.Item onClick={() => handleLogOut()}>Logout</NavDropdown.Item>\r\n                                    </NavDropdown>\r\n                                    : <Nav navbar>\r\n                                        <NavItem>\r\n                                            <NavLink className=\"nav-link fa fa-sign-in fa-sm\" to='' onClick={() => toggleSigninPopup()}> Sign-in</NavLink>\r\n                                        </NavItem>\r\n                                        <NavItem>\r\n                                            <NavLink className=\"nav-link fa fa-list-alt  fa-sm\" to='' onClick={() => toggleSignupPopup()}> Sign-up</NavLink>\r\n                                        </NavItem>\r\n                                    </Nav>}\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass TaskForm extends Component {\r\n\r\n    handleSubmit = (event) => {\r\n        const { addToDo, userInfo } = this.props;\r\n        const newTodo = {\r\n            userId: Date.now(),\r\n            userName: userInfo.userName,\r\n            userEmail: userInfo.userEmail,\r\n            task: this.inputNode.value,\r\n            status: 'pending',\r\n            dateCreated: Date.now()\r\n        }\r\n        addToDo(newTodo);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group controlId=\"formTask\">\r\n                    <Form.Label>Task Detail</Form.Label>\r\n                    <Form.Control type=\"text\" maxLength={30} placeholder=\"Enter task name.\" required ref={node => (this.inputNode = node)} />\r\n                </Form.Group>\r\n                <Link onClick={this.handleSubmit}>\r\n                    Add\r\n                </Link>\r\n            </Form>\r\n        )\r\n    };\r\n}\r\n\r\nexport default TaskForm;","export const required = (val) => val && val.length;\r\nexport const maxLength = (val, len) => !(val) || (val.length <= len);\r\nexport const minLength = (val, len) => val && (val.length >= len);\r\nexport const validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\nexport const isSamePassword = (password, confirmPassword) => password === confirmPassword","import React from \"react\";\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { FormGroup, Label, Input, FormFeedback } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport firebase from \"firebase\";\r\nimport { required, validEmail } from '../../utils/Validation';\r\nimport { db } from '../../firebase';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './Signin.css';\r\n\r\nclass Sigin extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            emailValid: true,\r\n            passwordValid: true\r\n        };\r\n        this.handleGoogleLogin = this.handleGoogleLogin.bind(this);\r\n        this.authSuccess = this.authSuccess.bind(this);\r\n        this.handleSignin = this.handleSignin.bind(this);\r\n    }\r\n\r\n    appTokenKey = \"appToken\";\r\n\r\n    handleSignin = () => {\r\n\r\n        this.validateForm();\r\n\r\n        const isFormValid = this.state.emailValid && this.state.passwordValid;\r\n        if (!isFormValid) {\r\n            return;\r\n        }\r\n\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            this.state.email, this.state.password\r\n        ).then(user => {\r\n            this.authSuccess()\r\n        }).catch(err => {\r\n            if (err.code === \"auth/wrong-password\") {\r\n                this.shareToast(\"Password is invalid, Try again!\");\r\n                this.setState({\r\n                    passwordValid: false\r\n                });\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    validateForm = () => {\r\n        this.setState({\r\n            emailValid: validEmail(this.state.email),\r\n            passwordValid: required(this.state.password)\r\n        });\r\n    }\r\n\r\n    authSuccess = async () => {\r\n\r\n        let user = await db.collection('User').where(\"userEmail\", \"==\", this.state.email).get();\r\n        user.docs.map(doc => {\r\n            let userData = doc.data();\r\n            const userInfo = {\r\n                userName: userData.userName,\r\n                userEmail: userData.email,\r\n                userId: userData.userId\r\n            }\r\n            this.props.updateUserInfo(userInfo);\r\n            this.props.toggleSigninPopup();\r\n        })\r\n\r\n    }\r\n\r\n    handleGoogleLogin() {\r\n        this.loginWithGoogle().then(function (result) {\r\n            //Login successful\r\n        }).catch(function (error) {\r\n            alert(error);\r\n            localStorage.removeItem(\"firebaseAuthInProgress\");\r\n        });\r\n\r\n        localStorage.setItem(\"firebaseAuthInProgress\", \"1\");\r\n        this.props.toggleSigninPopup();\r\n    }\r\n\r\n    shareToast = (message) => toast(message);\r\n\r\n    loginWithGoogle() {\r\n        const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n        return firebase.auth().signInWithPopup(googleProvider);\r\n    }\r\n\r\n    onEmailchange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            emailValid: validEmail(event.target.value)\r\n        });\r\n    }\r\n\r\n    onPasswordchange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            passwordValid: required(event.target.value)\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { showSigninPopup, toggleSigninPopup } = this.props;\r\n        toast.configure();\r\n\r\n        return (\r\n            <Modal show={showSigninPopup} onHide={() => toggleSigninPopup()}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Signin</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <FormGroup>\r\n                        <Label for=\"email\" className=\"label\">Email:</Label>\r\n                        <Input invalid={!this.state.emailValid} type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter your email here...\" value={this.state.email} onChange={this.onEmailchange} />\r\n                        <FormFeedback>Not a valid Email address</FormFeedback>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"password\" className=\"label\">Password:</Label>\r\n                        <Input invalid={!this.state.passwordValid} type=\"password\" name=\"password\" id=\"password\" placeholder=\"Enter your password here...\" value={this.state.password} onChange={this.onPasswordchange} />\r\n                        <FormFeedback>This password is not correct.</FormFeedback>\r\n                    </FormGroup>\r\n                    <p className=\"link\">\r\n                        Having issues with sign in <Link onClick={() => this.shareToast('Only Google Authentication is available for this release!')}>Info?</Link>\r\n                    </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-success\" onClick={this.handleSignin.bind(this)}>Sign-in</Button>\r\n                    <Button variant=\"outline-primary\" onClick={() => this.handleGoogleLogin} >Continue with Google</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sigin;","import React, { Component } from \"react\";\r\nimport { FormGroup, Label, Input, FormFeedback } from 'reactstrap';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport firebase from \"firebase\";\r\nimport { toast } from 'react-toastify';\r\nimport { maxLength, minLength, validEmail, isSamePassword } from '../../utils/Validation';\r\nimport { db } from '../../firebase';\r\n\r\nclass Signup extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            confirmpassword: '',\r\n            nameValid: true,\r\n            emailValid: true,\r\n            passwordValid: true,\r\n            confirmPasswordValid: true\r\n        };\r\n        this.onNamechange = this.onNamechange.bind(this);\r\n        this.registerUser = this.registerUser.bind(this);\r\n        this.authSuccess = this.authSuccess.bind(this);\r\n        this.validateForm = this.validateForm.bind(this);\r\n    }\r\n\r\n    shareToast = (message) => toast(message);\r\n\r\n    onNamechange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            nameValid: minLength(event.target.value, 3) && maxLength(event.target.value, 12)\r\n        });\r\n    }\r\n\r\n    onEmailchange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            emailValid: validEmail(event.target.value)\r\n        });\r\n    }\r\n\r\n    onPasswordchange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            passwordValid: minLength(event.target.value, 6) && maxLength(event.target.value, 10)\r\n        });\r\n    }\r\n\r\n    onConfirmPasswordchange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            confirmPasswordValid: isSamePassword(this.state.password, event.target.value)\r\n        });\r\n    }\r\n\r\n    registerUser = () => {\r\n        this.validateForm();\r\n        const isFormValid = this.state.nameValid && this.state.emailValid && this.state.passwordValid && this.state.confirmPasswordValid;\r\n        if (!isFormValid) {\r\n            return;\r\n        }\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n            .then(() => this.authSuccess())\r\n            .catch(() => { this.shareToast('User registration failed!') });\r\n        this.props.toggleLoadingMode();\r\n        this.props.toggleSignupPopup();\r\n    }\r\n\r\n    authSuccess = () => {\r\n        const userInfo = {\r\n            userName: this.state.name,\r\n            userEmail: this.state.email,\r\n            userId: Date.now()\r\n        }\r\n\r\n        db.collection('User').doc(userInfo.userId.toString()).set(userInfo).then(() => {\r\n            this.props.updateUserInfo(userInfo);\r\n            this.props.toggleLoadingMode();\r\n        }).catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n    }\r\n\r\n    validateForm = () => {\r\n        this.setState({\r\n            nameValid: (minLength(this.state.name, 3) && maxLength(this.state.name, 12)),\r\n            emailValid: validEmail(this.state.email),\r\n            passwordValid: (minLength(this.state.password, 6) && maxLength(this.state.password, 10)),\r\n            confirmPasswordValid: isSamePassword(this.state.password, this.state.confirmpassword)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { showSignupPopup, toggleSignupPopup } = this.props;\r\n        toast.configure();\r\n\r\n        return (\r\n            <Modal show={showSignupPopup} onHide={() => toggleSignupPopup()}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Signup</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <FormGroup>\r\n                        <Label for=\"name\">Name:</Label>\r\n                        <Input invalid={!this.state.nameValid} type=\"name\" name=\"name\" id=\"name\" placeholder=\"Enter your name here...\" value={this.state.name} onChange={this.onNamechange} />\r\n                        <FormFeedback>Name of at least 3 & at most 12 character is required</FormFeedback>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"email\" className=\"label\">Email:</Label>\r\n                        <Input invalid={!this.state.emailValid} type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter your email here...\" value={this.state.email} onChange={this.onEmailchange} />\r\n                        <FormFeedback>Not a valid Email address</FormFeedback>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"password\" className=\"label\">Password:</Label>\r\n                        <Input invalid={!this.state.passwordValid} type=\"password\" name=\"password\" id=\"password\" placeholder=\"Enter your password here...\" value={this.state.password} onChange={this.onPasswordchange} />\r\n                        <FormFeedback>Password of at least 6 & at most 10 character is Required</FormFeedback>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"confirmpassword\" className=\"label\">Confirm Password:</Label>\r\n                        <Input invalid={!this.state.confirmPasswordValid} type=\"password\" name=\"confirmpassword\" id=\"confirmpassword\" placeholder=\"Confirm your password...\" value={this.state.confirmpassword} onChange={this.onConfirmPasswordchange} />\r\n                        <FormFeedback>Password doesn't match</FormFeedback>\r\n                    </FormGroup>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-success\" onClick={this.registerUser}>Sign-up</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signup;","import React, { Component } from \"react\";\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nclass Leaderboard extends Component {\r\n\r\n    render() {\r\n        const { showLeaderboardPopup, toggleLeaderboardPopup } = this.props;\r\n\r\n        return (\r\n            <Modal show={showLeaderboardPopup} onHide={() => toggleLeaderboardPopup()} >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Leaderboard</Modal.Title>\r\n                </Modal.Header>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Leaderboard;","import React, { Component } from \"react\";\r\n\r\nclass Loading extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-12 todo-list\" >\r\n                <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\r\n                <p>Loading . . .</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loading;","import React, { Component } from \"react\";\r\nimport TodoItem from '../TodoItem/ToDoItem';\r\nimport { db } from '../../firebase';\r\nimport Header from '../Header/Header';\r\nimport TaskForm from \"../TaskForm/TaskForm\";\r\nimport Signin from '../Signin/Signin';\r\nimport Signup from \"../Signup/Signup\";\r\nimport Leaderboard from \"../Leaderboard/Leaderboard\";\r\nimport firebase from \"firebase\";\r\nimport Loading from '../Loading/Loading'\r\nimport './Main.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Main extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            todos: [],\r\n            showTaskForm: false,\r\n            userInfo: {\r\n                userName: '',\r\n                userEmail: '',\r\n                userId: ''\r\n            },\r\n            isLoading: true,\r\n            completedTaskMode: false,\r\n            showSigninPopup: false,\r\n            showSignupPopup: false,\r\n            showLeaderboardPopup: false,\r\n            releaseVersion: '1.0'\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.updateContent();\r\n        firebase.auth().onAuthStateChanged(user => {\r\n            if (user) {\r\n                localStorage.removeItem(\"firebaseAuthInProgress\");\r\n                localStorage.setItem(this.appTokenKey, user.uid);\r\n                const userInfo = {\r\n                    userName: user.displayName,\r\n                    userEmail: user.email,\r\n                    userId: user.email\r\n                };\r\n                this.updateUserInfo(userInfo);\r\n            }\r\n        });\r\n    }\r\n\r\n    toggleCompletedTaskMode = (mode) => this.setState({ completedTaskMode: mode });\r\n    toggleShowTaskFormMode = (mode) => this.setState({ showTaskForm: mode });\r\n    updateUserInfo = (userInfo) => this.setState({ userInfo });\r\n    toggleSigninPopup = () => this.setState({ showSigninPopup: !this.state.showSigninPopup });\r\n    toggleSignupPopup = () => this.setState({ showSignupPopup: !this.state.showSignupPopup });\r\n    toggleLeaderboardPopup = () => this.setState({ showLeaderboardPopup: !this.state.showLeaderboardPopup });\r\n    toggleLoadingMode = () => this.setState({ isLoading: !this.state.isLoading });\r\n\r\n    handleLogOut = () => {\r\n        this.toggleLoadingMode();\r\n        firebase.auth().signOut().then(function () {\r\n            localStorage.removeItem(\"appToken\");\r\n            const userInfo = {\r\n                userName: '',\r\n                userEmail: '',\r\n                userId: ''\r\n            };\r\n            this.updateUserInfo(userInfo);\r\n            this.toggleLoadingMode();\r\n        }.bind(this));\r\n    };\r\n\r\n    updateContent = async () => {\r\n        let tododatas = await db.collection(\"ToDoList\").get();\r\n        let list = tododatas.docs.map(doc => {\r\n            let data = doc.data();\r\n            return {\r\n                userId: data.userId,\r\n                task: data.task,\r\n                userEmail: data.userEmail,\r\n                status: data.status,\r\n                userName: data.userName\r\n            }\r\n        })\r\n        this.setState({\r\n            todos: list,\r\n            isLoading: false\r\n        })\r\n    };\r\n\r\n    addTodo = (newTodo) => {\r\n        db.collection('ToDoList').doc(newTodo.userId.toString()).set(newTodo).then(() => {\r\n            const { todos } = this.state;\r\n            todos.push(newTodo);\r\n            this.setState({\r\n                todos,\r\n                showTaskForm: false\r\n            })\r\n        }).catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n    }\r\n\r\n    handleChange = (id) => {\r\n\r\n        const { todos } = this.state;\r\n        db.collection(\"ToDoList\").doc(id.toString()).update({\r\n            \"status\": \"completed\",\r\n        }).then(() => {\r\n            const updatedTodos = todos.map(todo =>\r\n                todo.userId === id\r\n                    ? { ...todo, status: 'completed' }\r\n                    : todo\r\n            )\r\n            this.setState({ todos: updatedTodos });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { completedTaskMode, showTaskForm, todos, userInfo } = this.state;\r\n        const completedtodos = todos.filter((item) => { return (item.status === 'completed' && item.userEmail === userInfo.userEmail) }).map((item) => < TodoItem key={item.userId} item={item} handleChange={this.handleChange} />);\r\n        const pendingtodos = todos.filter((item) => { return item.status === 'pending' && item.userEmail === userInfo.userEmail }).map((item) => < TodoItem key={item.userId} item={item} handleChange={this.handleChange} />);\r\n        const userName = userInfo.userName === '' ? 'there' : userInfo.userName;\r\n        return (\r\n            <div>\r\n                <Header toggleCompletedTaskMode={this.toggleCompletedTaskMode} toggleSigninPopup={this.toggleSigninPopup} toggleSignupPopup={this.toggleSignupPopup} toggleLeaderboardPopup={this.toggleLeaderboardPopup} handleLogOut={this.handleLogOut} {...this.state} />\r\n                <Signin toggleSigninPopup={this.toggleSigninPopup} toggleLoadingMode={this.toggleLoadingMode} {...this.state} updateUserInfo={this.updateUserInfo} />\r\n                <Signup toggleSignupPopup={this.toggleSignupPopup} toggleLoadingMode={this.toggleLoadingMode} {...this.state} updateUserInfo={this.updateUserInfo} />\r\n                <Leaderboard toggleLeaderboardPopup={this.toggleLeaderboardPopup} {...this.state} />\r\n                {this.state.isLoading ?\r\n                    <Loading /> : <div>\r\n                        {completedTaskMode ?\r\n                            <div className=\"todo-list\">\r\n                                {this.showHeaderText(\"Woo Hoo, You have completed following tasks!\")}\r\n                                <div className=\"scroll-div\">\r\n                                    {completedtodos}\r\n                                </div>\r\n                            </div> :\r\n                            <div className=\"todo-list\">\r\n                                {this.showHeaderText(\"Hey \" + userName + \", what's on your mind today?\")}\r\n                                <div className=\"scroll-div\">\r\n                                    {pendingtodos}\r\n                                </div>\r\n                                {showTaskForm && this.showTaskForm()}\r\n                                <div className=\"todo-link\">\r\n                                    <Link onClick={() => this.toggleShowTaskFormMode(true)}>Add Task</Link>\r\n                                </div>\r\n                            </div>} </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    showHeaderText = (headerText) => {\r\n        return <h3> {headerText} </h3>\r\n    }\r\n\r\n    showTaskForm = () => {\r\n        return (\r\n            <TaskForm addToDo={this.addTodo.bind(this)} {...this.state} />\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Main;","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Main from './components/Main/Main';\r\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route exact path='/To-Do-List-App' component={Main} />\r\n            <Route exact path='/' component={Main} />\r\n            <Route exact path='/To-Do-List-App/home' component={Main} />\r\n            <Route exact path='/To-Do-List-App/completed-task' component={Main} />\r\n            <Redirect to=\"/To-Do-List-App/home\" />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}