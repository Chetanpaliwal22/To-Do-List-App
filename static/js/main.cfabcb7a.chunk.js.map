{"version":3,"sources":["ToDoItem.js","firebase.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","checked","item","completed","onChange","handleChange","id","text","db","firebase","initializeApp","apiKey","projectId","storageBucket","messagingSenderId","appId","firestore","Main","updateContent","a","collection","get","tododatas","list","docs","map","doc","data","setState","todos","toString","delete","then","updatedTodos","state","filter","todo","showForm","Form","onSubmit","handleSubmit","Group","controlId","Label","Control","maxLength","placeholder","required","ref","node","inputNode","Text","Check","label","Button","variant","event","preventDefault","Date","now","newTask","value","set","push","catch","error","console","userInfo","auth","signInAnonymously","onAuthStateChanged","user","isAnonymous","uid","this","todoItems","onClick","disabled","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cfabcb7a.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nfunction TodoItem(props) {\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <label>\r\n            <input \r\n                type=\"radio\" \r\n                checked={props.item.completed} \r\n                onChange={() => props.handleChange(props.item.id)}\r\n            />\r\n            </label>\r\n            <p>{props.item.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyB0SROk4amzArI8RzE-omf2dNsMyvFQ6YY\",\r\n  projectId: \"to-do-list-app-25482\",\r\n  storageBucket: \"to-do-list-app-25482.appspot.com\",\r\n  messagingSenderId: \"580095436319\",\r\n  appId: \"1:580095436319:web:79a40bdf16348bba38d72a\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport { db };","import React, { Component } from \"react\";\r\nimport TodoItem from '../ToDoItem';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { db } from '../firebase';\r\nimport firebase from \"firebase\";\r\n\r\nclass Main extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            todos: [],\r\n            showForm: false,\r\n            userInfo: {}\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //Signing in anonymous user\r\n        try {\r\n            await firebase.auth().signInAnonymously()\r\n        }\r\n        catch (error) {\r\n            //Handle Error here\r\n        }\r\n\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                // User is signed in.\r\n                var isAnonymous = user.isAnonymous;\r\n                var uid = user.uid;\r\n                let userInfo = {\r\n                    isAnonymous,\r\n                    uid\r\n                }\r\n                this.setState({ userInfo })\r\n            } else {\r\n                // User is signed out.\r\n            }\r\n        });\r\n\r\n        this.updateContent()\r\n    }\r\n\r\n    updateContent = async () => {\r\n        let tododatas = await db.collection(\"ToDoList\").get()\r\n        let list = tododatas.docs.map(doc => {\r\n            return doc.data()\r\n        })\r\n        this.setState({\r\n            todos: list\r\n        })\r\n    }\r\n\r\n    handleChange = (id) => {\r\n        db.collection(\"ToDoList\").doc(id.toString()).delete().then(() => {\r\n            let updatedTodos = this.state.todos.filter(function (todo) {\r\n                return todo.id !== id;\r\n            });\r\n            this.setState({ todos: updatedTodos });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange} />)\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"todo-list\">\r\n                    <div >\r\n                        <h1> TO-DO LIST </h1>\r\n                        <h3>Hey there, what's on your mind today?</h3>\r\n                        {todoItems}\r\n                    </div>\r\n                    {this.state.showForm ? this.showForm() : null}\r\n                    <div className=\"todo-button\">\r\n                        <Button variant=\"outline-success\" onClick={() => this.setState({ showForm: true })} disabled={this.state.showForm}>Add Task</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    showForm = () => {\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <Form.Group controlId=\"formTask\">\r\n                    <Form.Label>Task Detail</Form.Label>\r\n                    <Form.Control type=\"text\" maxLength={30} placeholder=\"Enter task name.\" required ref={node => (this.inputNode = node)} />\r\n                    <Form.Text className=\"text-muted\">\r\n                        We'll be pushing this task to DB.\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicCheckbox\">\r\n                    <Form.Check type=\"checkbox\" required label=\"Prove that, you are not a robot.\" />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Add\r\n                </Button>\r\n            </Form>\r\n\r\n        );\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.setState({ showForm: false })\r\n        let id = Date.now();\r\n        let newTask = {\r\n            id: id,\r\n            text: this.inputNode.value,\r\n            completed: false\r\n        }\r\n        db.collection('ToDoList').doc(id.toString()).set(newTask).then(() => {\r\n            this.state.todos.push(newTask)\r\n            this.setState({\r\n                todos: this.state.todos,\r\n                showForm: false\r\n            })\r\n        }).catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default Main;","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Main from './components/MainComponent';\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Main/>\r\n      </div>\r\n    )\r\n  };\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}